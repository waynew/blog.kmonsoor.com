{"pages":[{"url":"http://blog.kmonsoor.com/about/","text":"Hello ! Welcome to my little corner on the internet. I am Khaled, from Dhaka, Bangladesh. I am a techie, photographer, human-lover, Muslim, traveler, and a blogger. I love to share my experience, knowledge, love, criticism, passion, idea, feelings with you. In general, my online pseudonym is kmonsoor . But on Twitter, i am @KhaledMonsoor Professionally, I am software engineer, on Python-based stack. My professional profile is at Linkedin.com . For any query, please feel free to send email to: k (at) kmonsoor (dot) com","tags":"pages","title":"About"},{"url":"http://blog.kmonsoor.com/open-source-as-if-you-gonna-die-tonight/","text":"[ To keep the spirit of this post honest, i am going to publish this blog, immidiately. No draft -ing. This post will be, i hope, under improvement continuously. This post is, right now, in version 0.0.3] Yes, I mean it. Literally. I see too many post/comments/blogs, in different meeting-places for techies e.g. hackernews, reddit, etc., which implies the same thing. \" I am working on something which I will open-source/publish someday after taking it somewhere .\" See the ambiguous sense in the words? Unless the code/script/blog, you are working on, is something sensitive which will make a mess published in \"draft\"-situation, you should not wait that special \"someday\". Or, unless you have thousands of subscribers for you blog posts, of course. Or, if you decided that you never gonna publish it in public, that's entirely different story. If it is something of your company's code-base, commit it in your remote-branch. So that your work of last 19-days isn't just gone just because you are \"gone\". As human, we are far more fragile than we think. I am not talking about publishing a book in a block-printing publishing house. In that scenario, writers were supposed to write the perfect words, then type it using type-writer to avoid any handwriting-related gotchas. Then reviewer, then prrofreader, then the press-man(don't know what they were called) make a block by putting on character-by-character. Then it came to printing on the paper. So, the writer had to make sure what he is writing about, ABSOLUTELY . Else, each of the 2000 copies of the first-edition would have the same mistakes. I am also not talking about pushing the critical code in the production server. That staff should go through rigorous coding practices, code-reviews, testing etc. Except those cases, in this 2015 , how much each of our git push origin gh-pages cost? How much each WordPress post update cost? Or, a single Github gist? As of today, publishing your staffs is literally free. No matter how many times you update that. So, why our thinking paradigm around \"publishing\" is stuck in past press-publishing era? Frequently shared confusions ( FSQ ) What if this, my thing, is just plain crap ? * A. Are you sure? You never know for sure. Throw it in the wild. If it is really crap, nobody will remember or hold you responsible for it. How many crappy de-Vinci paintings you know? I guess, none. * But, Monalisa didn't just appear from thin air. Did it? This is my toy(or, pet) project. A. Don't be that selfish kid from the school who don't let others touch it just because. If you are having fun building something why don't let others join in the fun. This is a one-off script on this COBOL platform, no one gonna need it. Ever. A. You never know. You are a human. You can't imagine what people gonna need. Throw it in a gist , just include a suitable title. Add in some comments if you please. May be couple of years later, your script gonna save someone's job, hence his family's bread-on-the-table. You never know. If i publish this now, some genius, with free time, will take away this idea and make it something grand without me. A. Unless, you are a big hot-shot throwing a ground-breaking idea, no one gonna even notice it. Most genius' mind is already idea-ed down with their own to-do list. Even if they take away, let them. You move on. Don't be a muddy pond, rather be like a river. Rivers don't dry off due to peasents are \"stealing\" some water. Around this post, i haven't collected my thoughts around it to make it a grand one. A. Don't think of yourself too high. Let others do that for you. No project born grand, no great man born great. Your contributions is what goes ahead. You the person? Not so much. Time passed along the \"Romeo & Juliet\", not much the \"person\" Shakespeare. I am special. My words/codes should be special, perfect, coherent like a pearl-necklace. (yes, we all do it, just don't acknowledge it publicly.) A. No, you are not. You are not something that special unique snowflake. See the previous answer. Who the ***k are you to tell me what to do? A. It's not about me, I am nobody. Just a open-source enthusiast to see more and more open-source projects, scripts, blog-posts which don't necessarily have to go to the graves along their mortal creators. Here, am sharing just sharing my thinking around it. It is your code on your own personal-pc, after all. Why should I open my \"source\" right tonight ? You can literally die tonight. And, all your pet-projects are just gone. ‘Cause probably none in your family is in coding business or they aren't sure about your intention. Tomorrow morning, your mind will just drift-away. What is a vivid idea tonight which can impact thousands of people's life, tomorrow morning it will become a faded, will-do-it-someday idea. One month after tonight, you probably become just oblivious about your own idea, draft, script, code. It's a mind-trick to force it work on something to avoid public shame. We feel obliged to correct errata that is in public, not even 2% of that if it is in private, hidden in some local folder. To avoid the embarrassment Make sure your audience (or colleague for that matter) know the content's status. Put a \"prelude\" section mentioning the half-done condition. Better, use some version number. Make it clear what it is all about. For coding staffs, roughly point out what it is, what it is supposed to do. For blog, present the basic idea at least, even it is not with a pertfect grammer. How infrastructure can improve Open-source mainstream hosting platforms e.g. Github, Bitbucket, GitLab etc. could have a \"Open the source\" trigger-switch for individual projects where a software developer can enable the trigger with some condition like: \" Open the source \" if I don't login Github for 1 year (which means I am dead or gone crazy to remember Github) \" Open the source \" on a pre-set date e.g. 2020-02-20 [dear reader, thanks a lot for reading upto here. I am sure, there are many points missing on this post. Also, as English is not my first language, hence there must some misused words or phrase. But you get the idea. Please comment/criticise/point out the missing staffs. I will try to discuss, update, correct that.]","tags":"tech","title":"Open Source as-if You Gonna Die Tonight"},{"url":"http://blog.kmonsoor.com/pelican-create-a-prefilled-markdown-post/","text":"I use this Python script to jump-start a new post. Nothing fancy, but useful. Especially, if you are like me; hate to do same staff repeatedly. Clone this script in your blog's working folder on your pc. Once and forever. $ git clone https://gist.github.com/942d661b4666ddce352f.git Now, whenever you create a new post, run it like: $ python2 ./pelican_new_MD_post_template.py 'your new blog post title' Then, it will create a empty post in ./content/articles/ folder, by default. Now, edit that post and blog away. Here's the script: \"\"\" author: Khaled Monsoor modified: 09-Dec-2015 license: The MIT License \"\"\" import sys from datetime import datetime MD_TEMPLATE = \"\"\" Title: {title} Date: {year}-{month}-{day} {hour}:{minute} Modified: {year}-{month}-{day} {hour}:{minute} Category: Tags: Slug: {slug} status: draft Summary: \"\"\" def make_entry(title): now = datetime.now() slug = title.lower().strip().replace(' ', '-') new_file = \"content/articles/{}{:0>2}{:0>2}-{}.md\".format(now.year, now.month, now.day, slug) MD_TEMPLATE = MD_TEMPLATE.strip().format(title=title, year=now.year, month=now.month, day=now.day, hour=now.hour, minute=now.minute, slug=slug) with open(new_file, 'w') as f: f.write(MD_TEMPLATE) print(\"New post file created as: \" + new_file) if __name__ == '__main__': if len(sys.argv) > 1: make_entry(sys.argv[1]) else: print \"No title given\" Thanks for being here. Got any improvement suggestions? Plz let me know by comment on either here or on the Github gist.","tags":"tech","title":"Pelican blog : Create a prefilled MarkDown(*.md) post"},{"url":"http://blog.kmonsoor.com/top-bangladeshi-stackoverflow-rockstars/","text":"[ last updated: 2015-12-21] Bangladeshi StackOverflow rockers The top 100 StackOverflow rockstars from Bangladesh. Know them. Follow them. Or, offer them your next project. Scoring The initial list of reputations and sorting is taken from StackExchange public dataset by filtering location by ‘Bangladesh'. So, whose SO profile missing his/her location info is missing from this list. However, that primary score/sorting has been preserved in this final presented list. The Honor Roll SO profile StackExchange Flair Github Personal site contact The Alpha heera heera.it/… heerasheikh@ymail.com thecodeparadox shiplu.mokadd.im shiplu mokadd.im/… shiplu.net@gmail.com taskinoor taskinoor wordpress.com/… taskinoor@gmail.com Imran StinePike linkedin.com/… Games Brainiac gamesbrainiac nafiulis.me/… gamesbrainiac@gmail.com Sabuj Hassan Masud masudcse05 wordpress.com/… Anik Islam Abhi anik123 abhi.cse.aiub@gmail.com Rasel google.com/… Abdul Munim munim.net/… Sage m2mdas github.io/… Usman usmanhalalit usman.it/… hi@usman.it mshsayem 0605002 sufian002 Awlad Liton awladnas about.me/… awlad@nascenia.com Donotalo codingame.com/… Drongo MD . Sahib Bin Mahboob mdsahib.me/… Rakib Jahid neurobin neurobin.org/… jahidulhamid@yahoo.com Imran Rana kuet.ac.bd/… Warif Akhand Rishi Razib AtanuCSE facebook.com/… Rifat torifat rifat@facebook.com rakeb.mazharul rakeb konai.com/… Kowser kowsercse.com/… Atish Dipongkor facebook.com/… Ariful Islam mdarifulislam.com/… MikroDel stackoverflow.com/… Muntasim amuntasim ishkul.com/… ahmed2tul@gmail.com Md. Monsur Hossain Tonmoy Md Abdul Gafur solution24hourexplorer wordpress.com/… Sazzadur Rahaman Sharvy Ahmed sharvy wordpress.com/… sharvy2008@gmail.com ruddra skyrudy ruddra.com/… Reza Shaiful Shaiful Islam stackoverflow.com/… Ashiquzzaman ashiquzzaman33 ashiquzzaman33@gmail.com ridoy gypsicoder androidcodehunter sarwar026 awardspace.com/… Hasib Hasan Arnab arnabsust wordpress.com/… Ahsanul Haque Ashad Shanto Samiron blogspot.com/… Being Sunny Salman esalman esalman.com/… cpu.salman@gmail.com Azim Mohayemin bitbucket.org/… Mohammod Hossain Saif sadaf2605 sadaf2605 sadafnoor.com/… sadaf2605@gmail.com Mohammad Arman rmanaugmedix augmedix.com/… arman@augmedix.com SIslam Abdur Rahman sinepulse.com/… ashish The System Restart google.com/… salman wahed salmanwahed blogspot.com/… dev.salmanwahed@gmail.com Fallen Prokash Sarkar prokash-sarkar prokashsarkar.com/… riad Sohan smsohan.com/… xiidea Abdullah Md. Zubair raihan blogspot.com/… raihan.zbr@gmail.com Rafi Kamal rafi-kamal rafikamal.me/… rafikamal93@gmail.com Chinmoy Debnath Aftnix aftnix Woody Pride poverty-action.org/… Rubyrider rubyrider irfan.net.bd/… irfandhk@gmail.com Amitku wordpress.com/… Hissain hissain.in/… Suvash sarker Aerofoil Kite aerofoil-kite ikaras@live.com Dewsworld Wasif Hossain Riad IronBlossom google.com/… fida1989 about.me/… Nikson Kanti Paul nikson.github.io github.io/… jainal StreetCoder streetcoder.net/… Ahosan Karim Asik facebook.com/… Amit K. Saha Tunvir Rahman Tusher Alvi_1987 alvi2014 shahinul.com/… itsazzad itsazzad itsazzad@gmail.com Imrul blogspot.com/… syedrakib syedrakib.me/… Mahbub mahbubblog.com/… Sadat abusadat.com/… Tulon stackoverflow.com/… Adil Mahmud Choudhury ans4u.com/… Walid Hossain facebook.com/… tausun facebook.com/… Contribute Please keep in mind that this whole thing is very primary implementation of an idea. So, without your feedback it will fail. Please add missing data, improving suggestion, as pull request or just add as an issue on this repo . Thanks in advance. FAQ 1. My SO reputation should put me in this list. Why i am missing here? A. Possibly your location is missing in your SO profile. Update that. It will eventually reflect on this list. 2. The sorting of this list looks off. What's the issue? A. The score-card image you are seeing is of total stackexchange reputations on all sites. But, the main sorting is based on StackOverflow reputation. If you check indivisual profiles, you will see that. 3. I think you have put yourself in the list unfairly. A. I wish i had. Unfortunately, I didn't made into the list. Yet. Still lacking some points. 4. You have published their contact emails publicly. Isn't that bad? A. The email addresses has been collected from their public profile on github.com. If it is public there, it can be public here, too. Still, if any individual tell me to take down his/her email from here, I'll definitely comply. Copyright © 2015 Khaled Monsoor Click the icon for the full license text.","tags":"tech","title":"Top Bangladeshi StackOverflow rockstars"},{"url":"http://blog.kmonsoor.com/seven-deadly-sins-in-python-code/","text":"Prelude I have used the word \"deadly\" to express the potential to diminish the productivity of a Python programmer or his fellow teammate(s) who will work on the same code. Please take all these with quite a bit of salt, due to my limited expertise & limited experience with different types of projects based on Python.* 7 is just a catchy number. And, of course, this top list is subject to change along with my experience. You are also most welcome to suggest your own-finding to make into this list. There are a lot of ways someone can make his (or her) Python code extremely difficult for himself and his fellow developers to work with and maintain. However, some are quite destructive by virtue. These ones are in my top-list. 1. The try: except: pass trio You know about design patterns, right ? At least, you know a little bit. From Wikipedia , Design patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns. Now, think of the complete opposite of design-pattern. It is called anti-pattern which silently \"destroys\" efficiency in code. The below pattern can be considered the most deadly anti-pattern in Python code. Aaron Maxwell called it most diabolical or \"evil\" anti-pattern. try : subtle_buggy_operation() # possibly with I/O or DB operation except : pass You thought to save some development time by \"pass\"ing them by. But, it will take hours, if not days, to find possible bugs, inside the block, later as all the exceptions are masked by the \"pass\" and the error location will be somewhere else outside this try:except block which may look like the most innocent code. Again, quoting from Aaron … In my nearly ten years of experience writing applications in Python, both individually and as part of a team, this pattern has stood out as the single greatest drain on developer productivity and application reliability, especially over the long term. 2. Wildcard imports i.e. from module import * This one single practice can render a nice (clean) module into a nightmare. According to a core Python developer David Goodger , Wild-card imports are from the dark side of Python. Never! The from module import * wild-card style leads to namespace pollution. You'll get things in your local namespace that you didn't expect to get. You may see imported names obscuring module-defined local names. You won't be able to figure out where certain names come from. Although a convenient shortcut, this should not be in production code. Moral: don't use wild-card imports! Also, in light of Yoda's mythical conversation s, David writes: LUKE : Is from module import * better than explicit imports? YODA : No, not better. Quicker, easier, more seductive. LUKE : But how will I know why explicit imports are better than the wild-card form? YODA : Know you will when your code you try to read six months from now. If you use this practice in between inter-connected modules in a mid-sized project, worry not. You'll start to get errors due to circular references soon enough. Sounds funny ? 3. Thinking that try:except:else construct is not a natural control flow in Python If you are coming from Java(or, similar) world, I understand your confusion. However, Python adopted this construct so much different than Java. It helps to realize Python's philosophy Ask for Forgiveness than Permission , aka \" EAFP paradigm\". Trying to avoid this will result in messy, unpythonic code. As this great answer on StackOverflow , by a core Python developer, Raymond Hettinger, on this matter where he nicely portrays the philosophy behind it. Quoting him : In the Python world, using exceptions for flow control is common and normal. Even the Python core developers use exceptions for flow-control and that style is heavily baked into the language (i.e. the iterator protocol uses StopIteration to signal loop termination). In addition, the try-except-style is used to prevent the race-conditions inherent in some of the \"look-before-you-leap\" constructs. For example, testing os.path.exists results in information that may be out-of-date by the time you use it. Likewise, Queue.full returns information that may be stale. The try:except:else style will produce more reliable code in these cases. In some other languages, that rule reflects their cultural norms as reflected in their libraries. The \"rule\" is also based in-part on performance considerations for those languages. Also, consider checking out this Q&A on StackOverflow on the same premise. 4. Making everything a Class aka Overusing classes What I am referring to is this talk by Jack Diederich on PyCon 2012. You should watch this couple of times and then once in every week. His summary is like … Stop creating classes, and modules in every now and then. Before creating one, think hard. Probably, what you need is writing just a function. Zen of Python described it as below. Read it again, again, and again. Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Flat is better than nested. Readability counts. If the implementation is hard to explain, it's a bad idea. Though the below is a perfectly valid class, it is a perfect example case of b***sh*t classes: class Greeting ( object ): def __init__ ( self , greeting= 'hello' ): self .greeting = greeting def greet ( self , name): return '%s! %s' % ( self .greeting, name) greeting = Greeting( 'hola' ) print greeting.greet( 'bob' ) It is doing exactly same as: def greet (greeting, target): return '%s! %s' % (greeting, target) He also showed a practical example how he simplified (aka re-factored) an API 's complete code, consisting: 1 Package, 22 Modules, 20 Classes, 660 Source Lines of Code into this below, a grand total of 8 lines. Yes, just 8 lines !!! MUFFIN_API = url= 'https://api.wbsrvc.com/%s/%s/' MUFFIN_API_KEY = 'SECRET-API-KEY' def request (noun, verb, **params): headers = { 'apikey' : MUFFIN_API_KEY} request = urllib2.Request(MUFFIN_API % (noun, verb), \\ urllib.urlencode(params), headers) return json.loads(urllib2.urlopen(request).read()) Moral: Stop re-inventing the wheel, use more of built-in library functions, use much-less own long chains of class-hierarchy. Still want to see a worst scenario of creating classes? Check this out: class Flow ( object ): \"\"\"Base class for all Flow objects.\"\"\" pass class Storage ( object ): def put ( self , data): _abstract() def get ( self ): _abstract() def _abstract (): raise NotImplementedError Yes, this is a real piece of code from Google API client code. (which, in total, has 10,000 SLOC , 115 modules, 207 classes ). Whereas someone did implemented the same , well maybe not extremely robust, but in 135 SLOC , 3 classes in total. You see the point, right? Guido did. Check his comment. 5. Saving time by not writing any documentation or inline comments If you don't write comments with your semi-obfuscated code, and no docstrings as well saving time and meeting deadlines, stay assure that within a short period you'll hate yourself when you will not remember what (& why) you did something while reading your own code. Today or tomorrow, you will leave the company. And, that code will haunt all the members of your team who will come across this code-like zombies; unless they totally cut-off-the-head(e.g. replace) of your code. There is just no excuse that you don't do \"documentation\" except you just don't care. If you would care, you would not only write minimal doc-strings and comments on complex code-sections, but also name your functions, methods, variables to reflect the purpose of the component to make them \"self-documented\". Here is a nice guide to properly documenting your Python code. However, there will still be deniers out there … * source: https://xkcd.com/1513/ * 6. Avoiding Unit-tests (and doc-tests) until the doomsday comes Yes, the judgement day will come. It will happen on the production server, with customer's downtime due to a \"completely\" manually-tested new feature, which will break something \"almost\" unrelated. Yes, your company can lose millions and can be out of business. Maybe after some sleep-less night of the development team, the \"bug\" would have found out. Maybe, this whole mess could be simply avoided if the developer wrote his/her modules' unit-test as well as doctests for the functions or methods. And, after implementing the feature he would have run the tests once across the project. The online book Dive-in-Python has an excellent introduction on unittest . Also, you can start with Hitchhiker's guide's introduction . 7. Mixing TAB and SPACE in the same file You will need no more reason to curse yourself just a while after. It will haunt you whenever you'll need to open the source-code in any editor other than your usual one. And, for others, \"oh my! I can't literally even…\". While Python 3 will simply refuse to interpret this \"half-breed\" file, in Python 2 , the interpretation of TAB is as if it is converted to spaces using 8-space tab stops. So while executing, you may have no clue how a specific-line is being executed as part of which code-block. For any code that you think someday someone else will read or use, to avoid confusion, you should stick with PEP -8 , or your team-specific coding style. PEP -8 strongly discourage mixing TAB and Space in a same file. Also, check out this Q&A on StackExchange. ​1. The first downside is that it quickly becomes a mess. … Formatting should be the task of the IDE . Developers have already enough work to care about the size of tabs, how much spaces will an IDE insert, etc. The code should be formatted correctly, and displayed correctly on other configurations, without forcing developers to think about it. Also, remember this Furthermore, it can be a good idea to avoid tabs altogether, because the semantics of tabs are not very well-defined in the computer world, and they can be displayed completely differently on different types of systems and editors. Also, tabs often get destroyed or wrongly converted during copy-paste operations, or when a piece of source code is inserted into a web page or other kind of markup code. Fin That's all for now. That's my list. This list hopes to evolve with my experience and expertise as well as the ever-changing collective wisdom of all the Python community. What's your take on the worst \"un-pythonic\" nightmares in Python code? Please feel free to share your 2-cents.","tags":"tech","title":"Se7en Deadly Sins to Do in Python code"},{"url":"http://blog.kmonsoor.com/generate-er-diagram-from-sql-database/","text":"When you are \"study\"-ing (for whatever reason) someone else's database, and the database has more than 20 tables, you are in trouble to understand what goes where. Now, imagine a database with 300+ tables. It's like spaghetti, but not enjoyable. Rather, horrific. I faced a similar challenge recently with a database of 250+ tables. Yes, i felt like in a deep sh*t. And, started looking for tools which can describe the tables in at least decent ER -diagram. If anything more, better. And, obviously free as my company is not paying. Then, I found SchemaSpy , originally authored by John Currier . It generate a complete in-depth HTML -based description (of course, including clickable ER -diagram) of the database, which you can then browse with your browser. My this post is on it's basic usage. The output will be kind of like this: It is based on Java technologies, but can work its magic on most of the major database technologies. But, you would need a appropriate JDBC connector for that database. Quote from the author: SchemaSpy uses JDBC 's database metadata extraction services to gather the majority of its information, but has to make vendor-specific SQL queries to gather some information such as the SQL associated with a view and the details of check constraints. In this post, as example, i have shown to use it with PostgreSQL. But, it's not the only one supported. You can use ot with any proper RDBMS system as long as it has a JDBC -connector. Now, to use it, you need these staffs. First of all , your system should have Java runtime properly installed. Download from here. SchemaSpy, which is a .jar file . Get it here . At the time of writing, it was version 5.0.0. JDBC connector to PostgreSQL . Make sure to match your PostgreSQL version. You can download it from here . You can check your PostgreSQL version by executing: SELECT version(); query on psql prompt. Also, SchemaSpy depends on GarphViz to generate the ER -diagrams, so you need to be installed it on your system. Get it from here.(http://www.graphviz.org/Download..php) And, of course make sure PostgreSQL instance running & serving the database you are trying to visualize. Quoting from the author: SchemaSpy uses the dot executable from Graphviz to generate graphical representations of the table/view relationships. This was initially added for people who see things visually. Now the graphical representation of relationships is a fundamental feature of the tool. Graphviz is not required to view the output generated by SchemaSpy, but the dot program should be in your PATH (not CLASSPATH ) when running SchemaSpy or none of the entity relationship diagrams will be generated (or use the -gv option). For convenience, i kept the .jar files ( JDBC -connector, and SchemaSpy) in my home folder. Now, in my case, My OS is Linux, my DB -host address is: 127.0.0.1, running PostgreSQL-9.3 at port 5432 . So, i run the command like this: $ java -jar ./schemaSpy_5.0.0.jar -t pgsql -host 127.0.0.1:5432 -db your_database_name \\ -u your_DB_user_name -p your_password -s public \\ -dp ./postgresql-9.3-1102.jdbc3.jar -o output_folder It may take a little while, depending on the size of the schema of the database. After that, you will find the output folder/directory named output_folder . You'll see some output when the magic is going on, like this. Using database properties: [./schemaSpy_5.0.0.jar]/net/sourceforge/schemaspy/dbTypes/pgsql.properties Gathering schema details................(6sec) Writing/graphing summary......(2sec) Writing/diagramming details..........................(31sec) Wrote relationship details of 113 tables/views to directory 'output' in 41 seconds. View the results by opening output_folder/index.html Now, start browsing the generated docs from \"index.html\" in the output folder. Good luck. :)","tags":"Tech","title":"[Step-by-step][How to] Generate ER diagram from a PostgreSQL (or any) database"},{"url":"http://blog.kmonsoor.com/uninstall-ie-9/","text":"DON 'T do it from \"Control Panel\">>\"Programs\">>\"Turn Windows Features on or off\". That will cause more trouble. Yes, looking at you, Microsoft. Here's how to do it cleanly. Go to START —> \"Control panel\" —> \"View installed updates\", Now scroll down the list, look for Windows Internet Explorer 9 in Microsoft Windows section, Double-click to Uninstall it, After finishing, it's better if you restart immediately, Your previous IE 8 will be restored, If you can't find IE 8 yet by typing \"Internet\" in the START >> \"Search for programs and files\", download IE 8 from here . However, don't forget to select right language and right OS version. Install the downloaded file as usual. For more noob-friendly-details, please visit Microsoft site, here. However, I highly recommend , as your day-to-day browser, and as a truly faster, secure and reliable Internet browser, consider using Google Chrome or Firefox browser (To get now, click here) Thanks for visiting my blog post.","tags":"tech","title":"Uninstall Crappy and Slow Internet Explorer ( IE ) 9 : Revert back to IE 8"},{"url":"http://blog.kmonsoor.com/convert-windows-7-k-to-en/","text":"Ended up with Windows 7 Enterprise in Korean language? What you are seeing, all are in Korean or any other foreign language? I am here to share my own experience. It may help you out. As I was working for a South Korean conglomerate, I had access to Windows 7 Enterprise K. So, I have to face a lot of trouble to make the conversion to English. As, there is no Microsoft's official help available, I have to find it myself. It would be great if I can share this with proper screen-shots of Korean Windows. But as I had already converted, I could not. Sorry about that. First of all, it will be best if you can install Windows 7 English version directly. If not possible at all, like your company have license only to use Korean version, or you purchased your laptop or PC in Korea. In those cases this post may help. I am assuming that: You have a valid license key or OEM VLK (Volume License Key) of Windows 7, either for Enterprise or for Ultimate edition. If you don't have Enterprise or Ultimate edition, but you have Home or Professional addition, the following method probably won't work. Steps: Install Windows 7 K on your PC ; DON 'T change any settings if you don't understand what it is saying. Don't install any anti-virus yet. Or any other system software. Validate and register your license. Go to Windows update. And update your Windows to Service pack 1. Please avoid updating Internet Explorer 8 to 9. Uncheck it. Now Windows will restart automatically. Again, Go to Windows update. In the optional section, you'll will see a long list of language pack. Select English . Complete update. Again restart. If your Windows 7 K is not converted to Windows 7(English) then from Language settings , choose English as display language. Again, restart. Now it should be in English. Some text still may be in Korean. Don't care for it. Your life will be quite okay with that. Now you install whatever software you want. Postscript if now you are in trouble with MS Office's Korean package, check out my relevant post. After completion, you may find trouble using Microsoft's Internet Explorer 9 . I don't know why Internet Explorer 9 don't work properly on Windows 7. If you face problem after installing it like \" I.E. is not responding….\", \" I.E. closed unexpectedly\" etc. uninstall that . But how? Please visit my relevant post.","tags":"tech","title":"Windows 7 Enterprise/Ultimate \"K\" to \" EN \" (aka English): Conversion Step-by-step"},{"url":"http://blog.kmonsoor.com/install-english-language-on-microsoft-office-2007-2010/","text":"NOTE If you are stuck with Windows 7 in a foreign language, this is not what you are looking for. Please check out my relevant post . Background As I have worked for a giant Korean conglomerate, I have to install Office 2007 Enterprise edition Korean version. I hunted, searched, tested many ways to convert/choose for English. But failed. But, now, I got it. Here's how. Process At first, check of your desired language file ( matching with your version of Office) here . For Office 2010 , check here . If it is there, voilà! You got it. Install the downloaded EXE file. As a security check, plz check the publisher name if it is \"Microsoft\" or not. If it is \"Microsoft\", you have nothing to worry about security. After completion, please restart your PC or laptop whether Windows tells so or not. Now, check using MS Office Language preference that is it set or not as below: … Now, happily use \"Office\" in your desired language. Credits I got the link from a user comment here . Though I didn't believe at first place. But it worked.","tags":"tech","title":"Install English (or another) Language Pack of Microsoft Office 2007, 2010 Enterprise : Step by step"}]}